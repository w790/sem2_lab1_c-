name: C++ build and release

on:
  push:
    branches:
      - main

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.bump_version.outputs.new_tag }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0")
          echo "last_tag=$last_tag" >> $GITHUB_ENV

      - name: Bump version
        id: bump_version
        run: |
          IFS='.' read -r major minor patch <<< "${last_tag//v/}"
          patch=$((patch + 1))
          new_tag="v$major.$minor.$patch"
          echo "new_tag=$new_tag" >> $GITHUB_ENV
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

  build-ubuntu: 
    runs-on: ubuntu-latest
    needs: create-release
    steps: 
      - uses: actions/checkout@v4
      
      - name: Clean build directory
        run: |
          rm -rf build
          mkdir -p build
          
      - name: Configure CMake with version
        run: |
          echo "Setting version to: ${{ needs.create-release.outputs.new_tag }}"
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DPROJECT_VERSION="${{ needs.create-release.outputs.new_tag }}"
          
      - name: Build project
        run: cmake --build build --config Release
        
      - name: Verify version in binary
        run: |
          echo "=== Checking binary version ==="
          ./build/hello_world
          strings build/hello_world | grep -i "v1\.0\|version" | head -5
          
      - uses: actions/upload-artifact@v4
        with:
          name: hello-world-ubuntu
          path: build/hello_world

  build-windows:
    runs-on: windows-latest 
    needs: create-release
    steps:
      - uses: actions/checkout@v4
      
      - name: Clean build directory
        run: |
          Remove-Item -Recurse -Force build -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Path build -Force
          
      - name: Configure CMake with version
        run: |
          $version = "${{ needs.create-release.outputs.new_tag }}"
          cmake -B build -DPROJECT_VERSION="$version"
          
      - name: Build project
        run: cmake --build build --config Release
        
      - name: Verify version in binary
        run: |
          echo "=== Checking binary version ==="
          .\build\Release\hello_world.exe
          strings .\build\Release\hello_world.exe | findstr "v1\.0 version" | head -5
          
      - uses: actions/upload-artifact@v4
        with:
          name: hello-world-windows
          path: build/Release/hello_world.exe

  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [create-release, build-ubuntu, build-windows]
    
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./artifacts/hello-world-ubuntu/hello_world
            ./artifacts/hello-world-windows/hello_world.exe
          tag_name: ${{ needs.create-release.outputs.new_tag }}
          name: Release ${{ needs.create-release.outputs.new_tag }}
          body: |
            Автоматический релиз ${{ needs.create-release.outputs.new_tag }}
            
            ### Содержание:
            - hello_world (Linux)
            - hello_world.exe (Windows)